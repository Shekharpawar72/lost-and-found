
async function getBillingDetails(vehicleId, renterPhone) {
    try {
        const response = await fetch(`http://localhost:3000/get-billing-details/${vehicleId}/${renterPhone}`);
        const data = await response.json();

        if (data.error) {
            console.error("Error:", data.error);
            alert("Error: " + data.error);
            return;
        }

        // ✅ Populate Vehicle Details
        document.getElementById("vehicleName").innerText = data.vehicle.vehicleName;
        document.getElementById("startDate").innerText = data.vehicle.startDate;
        document.getElementById("endDate").innerText = data.vehicle.endDate;
        document.getElementById("startTime").innerText = data.vehicle.startTime;
        document.getElementById("endTime").innerText = data.vehicle.endTime;
        document.getElementById("pickupLocation").innerText = data.vehicle.pickupLocation;
        document.getElementById("ownerName").innerText = data.vehicle.ownerName;
        document.getElementById("ownerPhone").innerText = data.vehicle.ownerPhone;
        document.getElementById("amount").innerText = `₹ ${data.vehicle.amount}`;
        document.getElementById("discount").innerText = `₹ ${data.vehicle.discount}`;
        document.getElementById("gst").innerText = `₹ ${data.vehicle.gst}`;
        document.getElementById("totalAmount").innerText = `₹ ${data.vehicle.totalAmount}`;

        // ✅ Populate Renter Details
        document.getElementById("renterName").innerText = data.renter.name;
        document.getElementById("renterPhone").innerText = data.renter.phone;
    } catch (error) {
        console.error("Error fetching billing details:", error);
        alert("Error fetching billing details. Check console for more details.");
    }
}

// ✅ Call the function with dynamic values
getBillingDetails("65a123456789abc123456789", "9123456789");





const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

const app = express();
app.use(cors());
app.use(express.json());

// ✅ Connect to MongoDB
mongoose.connect("mongodb://127.0.0.1:27017/vehicleRentalDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => console.log("✅ MongoDB Connected")).catch(err => console.log("❌ MongoDB Connection Error:", err));

// ✅ Define Models
const Vehicle = mongoose.model("Vehicle", new mongoose.Schema({
    vehicleName: String,
    startDate: String,
    endDate: String,
    startTime: String,
    endTime: String,
    pickupLocation: String,
    ownerName: String,
    ownerPhone: String,
    amount: Number,
    discount: Number,
    gst: Number,
    totalAmount: Number
}), "vehicles");  // 👈 Force collection name to "vehicles"

const Renter = mongoose.model("Renter", new mongoose.Schema({
    name: String,
    phone: String,
    email: String,
    password: String
}), "renters");  // 👈 Force collection name to "renters"

// ✅ API: Fetch Booking Details (Vehicle + Renter)
app.get("/get-billing-details/:vehicleId/:renterPhone", async (req, res) => {
    try {
        console.log("🔍 Searching for vehicle with ID:", req.params.vehicleId);
        console.log("🔍 Searching for renter with phone:", req.params.renterPhone);

        const vehicle = await Vehicle.findById(new mongoose.Types.ObjectId(req.params.vehicleId));
        const renter = await Renter.findOne({ phone: req.params.renterPhone });

        if (!vehicle) {
            console.log("❌ Vehicle not found");
            return res.status(404).json({ error: "Vehicle not found" });
        }

        if (!renter) {
            console.log("❌ Renter not found");
            return res.status(404).json({ error: "Renter not found" });
        }

        console.log("✅ Found vehicle:", vehicle);
        console.log("✅ Found renter:", renter);

        res.json({ vehicle, renter });
    } catch (error) {
        console.error("🚨 Error fetching data:", error.message);
        res.status(500).json({ error: error.message });
    }
});

// ✅ Start Server
const PORT = 3000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));













const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

const app = express();
app.use(cors());
app.use(express.json());

// ✅ Connect to MongoDB
mongoose.connect("mongodb://127.0.0.1:27017/vehicleRentalDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => console.log("✅ MongoDB Connected"))
  .catch(err => console.error("❌ MongoDB Connection Error:", err));

// ✅ Define Models
const Vehicle = mongoose.model("Vehicle", new mongoose.Schema({
    vehicleName: String,
    startDate: String,
    endDate: String,
    startTime: String,
    endTime: String,
    pickupLocation: String,
    ownerName: String,
    ownerPhone: String,
    amount: Number,
    discount: Number,
    gst: Number,
    totalAmount: Number
}));

const Renter = mongoose.model("Renter", new mongoose.Schema({
    name: String,
    phone: String,
    email: String,
    password: String
}));

// ✅ API: Fetch Billing Details (Vehicle + Renter)
app.get("/get-billing-details/:vehicleId/:renterPhone", async (req, res) => {
    try {
        const vehicle = await Vehicle.findById(req.params.vehicleId);
        const renter = await Renter.findOne({ phone: req.params.renterPhone });

        if (!vehicle || !renter) {
            return res.status(404).json({ error: "Data not found" });
        }

        res.json({ vehicle, renter });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ✅ Start Server
const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lost Item Registration</title>
    <link rel="stylesheet" href="style.css">
     <link rel="stylesheet" href="output.css">
</head>
<body class="flex justify-center items-center min-h-screen bg-gray-100 p-4">
    <div class="bg-white shadow-lg rounded-lg p-6 w-full max-w-3xl">
        <h2 class="text-2xl font-semibold text-center mb-4">Lost Item Registration</h2>

        <form id="registrationForm" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block font-medium">Year:</label>
                    <select id="year" class="w-full p-2 border rounded-md" required>
                        <option value="" selected disabled>Select Year</option>
                        <option value="1st Year">1st Year</option>
                        <option value="2nd Year">2nd Year</option>
                        <option value="3rd Year">3rd Year</option>
                        <option value="4th Year">4th Year</option>
                    </select>
                </div>
                <div>
                    <label class="block font-medium">Branch:</label>
                    <input type="text" id="branch" class="w-full p-2 border rounded-md" required>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block font-medium">Item Name:</label>
                    <input type="text" id="itemName" class="w-full p-2 border rounded-md" required>
                </div>
                <div>
                    <label class="block font-medium">Item Color:</label>
                    <input type="text" id="itemColor" class="w-full p-2 border rounded-md" required>
                </div>
            </div>

            <div>
                <label class="block font-medium">Category:</label>
                <select id="category" class="w-full p-2 border rounded-md" onchange="toggleElectronicFields()">
                    <option value="" selected disabled>Select Category</option>
                    <option value="electronic">Electronic</option>
                    <option value="non-electronic">Non-Electronic</option>
                </select>
            </div>

            <div id="electronicFields" class="hidden grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block font-medium">Model Number:</label>
                    <input type="text" id="modelNumber" class="w-full p-2 border rounded-md">
                </div>
                <div>
                    <label class="block font-medium">Model Name:</label>
                    <input type="text" id="modelName" class="w-full p-2 border rounded-md">
                </div>
            </div>

            <!-- <div>
                <label class="block font-medium">Description:</label>
                <textarea id="description" class="w-full p-2 border rounded-md h-24" required></textarea>
            </div> -->

            <div>
                <label class="block font-medium">Description:</label>
                <textarea id="description" class="w-full p-2 border rounded-md h-18 resize-none overflow-y-auto" required></textarea>
            </div>
            


            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block font-medium">Mark of Identification:</label>
                    <input type="text" id="markIdentification" class="w-full p-2 border rounded-md" required>
                </div>
                <div>
                    <label class="block font-medium">Upload Images (Max: 2):</label>
                    <input type="file" id="imageUpload" class="w-full p-2 border rounded-md" accept="image/*" multiple required>
                </div>
            </div>

            <!-- <button type="button" onclick="redirectToQRPage()" class="w-[40%] bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700">
                Generate QR Code
            </button> -->

            <div class="flex justify-center">
                <button type="button" onclick="redirectToQRPage()" class="w-[40%] inline-block px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-lg shadow-md text-lg font-medium hover:opacity-90 transition duration-300">
                    Generate QR Code
                </button>
            </div> 
             
        </form>
    </div>

    <script>
        function toggleElectronicFields() {
            const category = document.getElementById("category").value;
            const electronicFields = document.getElementById("electronicFields");
            if (category === "electronic") {
                electronicFields.classList.remove("hidden");
            } else {
                electronicFields.classList.add("hidden");
            }
        }

        function redirectToQRPage() {
            const fullName = document.getElementById("fullName").value;
            const phoneNumber = document.getElementById("phoneNumber").value;
            const year = document.getElementById("year").value;
            const branch = document.getElementById("branch").value;
            const itemName = document.getElementById("itemName").value;
            const itemColor = document.getElementById("itemColor").value;
            const category = document.getElementById("category").value;
            const modelNumber = document.getElementById("modelNumber").value || "N/A";
            const modelName = document.getElementById("modelName").value || "N/A";
            const description = document.getElementById("description").value;
            const markIdentification = document.getElementById("markIdentification").value;
            const timestamp = new Date().toLocaleString();

            if (!fullName || !phoneNumber || !year || !branch || !itemName || !itemColor || !description || !markIdentification) {
                alert("Please fill in all required fields.");
                return;
            }

            const qrData = JSON.stringify({
             year, branch, itemName, itemColor, category, modelNumber, modelName, description, markIdentification, timestamp
            });

            window.location.href = `qrpage.html?data=${encodeURIComponent(qrData)}`;
        }
    </script>
</body>
</html>










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Page</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="output.css">
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
</head>
<body class="flex justify-center items-center min-h-screen bg-gray-100 p-4">
    <div id="qrContainer" class="bg-white shadow-lg rounded-lg p-6 w-full max-w-md text-center">
        <h2 class="text-2xl font-semibold">Generated QR Code</h2>
        <div id="qrCode" class="flex justify-center mt-4"></div>
        <p class="mt-4 text-gray-700" id="timestamp"></p>
        <button onclick="downloadPDF()" class="mt-4 bg-green-600 text-white p-2 rounded-md hover:bg-green-700">
            Download as PDF
        </button>
    </div>

    <script>
        function getQueryParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        function generateQRCode(data) {
            new QRCode(document.getElementById("qrCode"), {
                text: data,
                width: 150,
                height: 150
            });
        }

        function displayData() {
            const qrData = getQueryParam("data");
            if (!qrData) {
                alert("No data found!");
                return;
            }

            const parsedData = JSON.parse(decodeURIComponent(qrData));
            const { fullName, phoneNumber, itemName, itemColor, markIdentification, timestamp } = parsedData;

            generateQRCode(qrData);

            document.getElementById("timestamp").innerText = `Generated on: ${timestamp}`;

            window.qrDetails = { fullName, phoneNumber, itemName, itemColor, markIdentification, timestamp };
        }

        function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            html2canvas(document.getElementById("qrContainer")).then(canvas => {
                const imgData = canvas.toDataURL("image/png");

                doc.text("Lost Item QR Code", 70, 20);
                doc.addImage(imgData, "PNG", 15, 30, 180, 100);
                doc.text(`Name: ${window.qrDetails.fullName}`, 20, 140);
                doc.text(`Phone: ${window.qrDetails.phoneNumber}`, 20, 150);
                doc.text(`Item: ${window.qrDetails.itemName} (${window.qrDetails.itemColor})`, 20, 160);
                doc.text(`Mark: ${window.qrDetails.markIdentification}`, 20, 170);
                doc.text(`Generated on: ${window.qrDetails.timestamp}`, 20, 180);

                doc.save("LostItemQRCode.pdf");
            });
        }

        window.onload = displayData;
    </script>
</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Page</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="output.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
</head>
<body class="flex justify-center items-center min-h-screen bg-gray-100 p-4">
    <div id="qrContainer" class="bg-white shadow-lg rounded-lg p-6 w-full max-w-md text-center">
        <h2 class="text-2xl font-semibold">Generated QR Code</h2>
        <div id="qrCode" class="flex justify-center mt-4"></div>
        <p class="mt-4 text-gray-700" id="timestamp"></p>
        <button onclick="downloadPDF()" class="mt-4 bg-green-600 text-white p-2 rounded-md hover:bg-green-700">
            Download as PDF
        </button>
    </div>

    <script>
        // Function to get query parameters from the URL
        function getQueryParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Function to generate a QR Code
        function generateQRCode(data) {
            const qrElement = document.getElementById("qrCode");
            qrElement.innerHTML = ""; // Clear previous QR code

            try {
                new QRCode(qrElement, {
                    text: data,
                    width: 200, // Increase size for better scanning
                    height: 200,
                    correctLevel: QRCode.CorrectLevel.L // Low error correction for better readability
                });
            } catch (error) {
                console.error("QR Code generation error:", error);
            }
        }

        // Function to display the QR Code with formatted data
        function displayData() {
            const qrData = getQueryParam("data");
            if (!qrData) {
                alert("No data found!");
                return;
            }

            try {
                const parsedData = JSON.parse(decodeURIComponent(qrData));

                // Convert data to a readable format
                const formattedData = `
                    // Name: ${parsedData.fullName || "N/A"}\n
                    // Phone: ${parsedData.phoneNumber || "N/A"}\n
                    Item: ${parsedData.itemName || "N/A"} (${parsedData.itemColor || "N/A"})\n
                    Mark: ${parsedData.markIdentification || "N/A"}\n
                    Generated on: ${parsedData.timestamp || "N/A"}
                `;

                generateQRCode(formattedData); // Use readable text instead of raw JSON
                document.getElementById("timestamp").innerText = `Generated on: ${parsedData.timestamp || "N/A"}`;
                
                // Store details for PDF download
                window.qrDetails = parsedData;

            } catch (error) {
                console.error("Error parsing QR data:", error);
                alert("Invalid QR code data!");
            }
        }

        // Function to download the QR code as a PDF
        function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            html2canvas(document.getElementById("qrContainer")).then(canvas => {
                const imgData = canvas.toDataURL("image/png");

                doc.text("Lost Item QR Code", 70, 20);
                doc.addImage(imgData, "PNG", 15, 30, 180, 100);
                doc.text(`Name: ${window.qrDetails.fullName}`, 20, 140);
                doc.text(`Phone: ${window.qrDetails.phoneNumber}`, 20, 150);
                doc.text(`Item: ${window.qrDetails.itemName} (${window.qrDetails.itemColor})`, 20, 160);
                doc.text(`Mark: ${window.qrDetails.markIdentification}`, 20, 170);
                doc.text(`Generated on: ${window.qrDetails.timestamp}`, 20, 180);

                doc.save("LostItemQRCode.pdf");
            });
        }

        // Run displayData when the page loads
        window.onload = displayData;
    </script>
</body>
</html>
